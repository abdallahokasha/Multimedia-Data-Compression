
import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Scanner;
import java.util.Vector;

/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author Abdallah Okasha
 */
public class standardhuffman extends javax.swing.JFrame {

    /**
     * Creates new form standardhuffman
     */
    public static class charInput {

        int freq;
        String c;

        charInput(int freq, String c) {
            this.freq = freq;
            this.c = c;
        }
    }

    public static class charCodes {

        String c;
        String code;

        charCodes(String c, String code) {
            this.c = c;
            this.code = code;
        }
    }
    String input = "";
    String decomp = "";
    String comp = "";
    ArrayList<charInput> frequencies = new ArrayList<charInput>();
    ArrayList<charCodes> dictionary = new ArrayList<charCodes>();

    public standardhuffman() {
        initComponents();
    }

    public void readDataFromFile() {
        File file = new File("D:\\FCI\\3th-Level\\Java\\StandardHuffman\\input.txt");
        try {
            Scanner sc = new Scanner(file);
            while (sc.hasNextLine()) {
                String line = sc.nextLine();
                //System.out.println(line);
                input += line;
            }
            sc.close();
        } catch (FileNotFoundException e) {
            textArea1.append("Error");
            e.printStackTrace();
        }
        textArea1.append("input data:\n");
        textArea1.append(input);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jRadioButton1 = new javax.swing.JRadioButton();
        jRadioButton2 = new javax.swing.JRadioButton();
        jButton1 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        textArea1 = new java.awt.TextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jRadioButton1.setText("Compress");
        jRadioButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton1ActionPerformed(evt);
            }
        });

        jRadioButton2.setText("De-Compress");
        jRadioButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton2ActionPerformed(evt);
            }
        });

        jButton1.setText("Ok");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel1.setText("Standard Huffman");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jRadioButton1)
                            .addComponent(jRadioButton2)
                            .addComponent(jButton1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(textArea1, javax.swing.GroupLayout.PREFERRED_SIZE, 214, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(21, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jRadioButton1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jRadioButton2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton1)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(textArea1, javax.swing.GroupLayout.DEFAULT_SIZE, 272, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public class Node {

        public String s;
        public int frequency;
        public Node right;
        public Node left;

        Node(String s, int frequency) {
            this.s = s;
            this.frequency = frequency;
        }
    }

    public class Tree {

        public Node root;

        public void add(String s1, int f1, String s2, int f2) {
            if (root == null) {
                root = new Node(s1 + s2, f1 + f2);
                root.left = new Node(s1 + "", f1);
                root.right = new Node(s2 + "", f2);
            } //el - root msh b null
            else {
                if (f1 == root.frequency) {
                    Node oldRoot = root;
                    Node r = new Node(s2 + "", f2);
                    root = new Node(s1 + s2, f1 + f2);
                    root.left = oldRoot;
                    root.right = r;
                } else if (f2 == root.frequency) {
                    Node oldRoot = root;
                    Node r = new Node(s1 + "", f1);
                    root = new Node(s1 + s2 + "", f1 + f2);
                    root.left = oldRoot;
                    root.right = r;
                } else {
                    Node oldRoot = root;
                    Node tmpRoot = new Node(s1 + s2 + "", f1 + f2);
                    tmpRoot.left = new Node(s1 + "", f1);
                    tmpRoot.right = new Node(s2 + "", f2);

                    root = new Node(oldRoot.s + tmpRoot.s + "", oldRoot.frequency + tmpRoot.frequency);
                    root.left = oldRoot;
                    root.right = tmpRoot;
                }
            }
        }

        public void print(Node root, String code) {
            if (root != null) {
                print(root.right, code + '1');
                charCodes cc = new charCodes(root.s, code);
                dictionary.add(cc);
                print(root.left, code + '0');
            } else {
                return;
            }
        }
    }

    public void compress() {
        //compute frequency of each char
        Tree t = new Tree();
        String unique = "";
        for (int i = 0; i < input.length(); ++i) {
            int c = 0;
            if (unique.contains(input.charAt(i) + "") == false) {
                unique += input.charAt(i);
                for (int j = 0; j < input.length(); ++j) {
                    if (input.charAt(j) == input.charAt(i)) {
                        ++c;
                    }
                }
                charInput ch = new charInput(c, input.charAt(i) + "");
                frequencies.add(ch);
            }
        }
        textArea1.append("\n Frequency of each char in input data \n");
        for (int i = 0; i < frequencies.size(); i++) {
            textArea1.append(frequencies.get(i).c + "-" + frequencies.get(i).freq + "\n");
        }

        while (frequencies.size() > 1) {
            sort();
            t.add(frequencies.get(0).c, frequencies.get(0).freq, frequencies.get(1).c + "",
                    frequencies.get(1).freq);
            charInput tmp = new charInput(frequencies.get(0).freq + frequencies.get(1).freq,
                    frequencies.get(0).c + frequencies.get(1).c);

            frequencies.remove(0);
            frequencies.remove(0);
            frequencies.add(tmp);
        }
        t.print(t.root, "");
        textArea1.append("Code of each node in tree: \n");
        for (int i = 0; i < dictionary.size(); i++) {
            textArea1.append(dictionary.get(i).c + " -> " + dictionary.get(i).code + "\n");
        }
        for (int i = 0; i < input.length(); i++) {
            for (int j = 0; j < dictionary.size(); j++) {
                if (dictionary.get(j).c.equals(input.charAt(i) + "") == true) {
                    comp += dictionary.get(j).code;
                    break;
                }
            }
        }
        textArea1.append("\ncompression: \n" + comp + "\n");
    }

    public void deCompress() {
        String code = "";
        for (int i = 0; i < comp.length(); i++) {
            code += comp.charAt(i);
            for (int j = 0; j < dictionary.size(); j++) {
                if (dictionary.get(j).code.equals(code) && dictionary.get(j).c.length() == 1) {
                    //System.out.println(">>>" + decomp);
                    decomp += dictionary.get(j).c;
                    code = "";
                    break;
                }
            }
        }
        textArea1.append("\n Decompression: \n"+decomp+"\n");
    }

    public void sort() {
        boolean Finished = false;
        while (!Finished) {
            Finished = true;
            for (int i = 1; i < frequencies.size(); i++) {
                if (frequencies.get(i).freq < frequencies.get(i - 1).freq) {
                    charInput tmp = new charInput(frequencies.get(i - 1).freq, frequencies.get(i - 1).c);
                    frequencies.set(i - 1, frequencies.get(i));
                    frequencies.set(i, tmp);
                    Finished = false;
                }
            }
        }
    }

    private void jRadioButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton1ActionPerformed
        // TODO add your handling code here:
        jRadioButton1.setSelected(true);
        jRadioButton2.setSelected(false);
    }//GEN-LAST:event_jRadioButton1ActionPerformed

    private void jRadioButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton2ActionPerformed
        // TODO add your handling code here:
        jRadioButton1.setSelected(false);
        jRadioButton2.setSelected(true);
    }//GEN-LAST:event_jRadioButton2ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        if (jRadioButton1.isSelected()) {
            readDataFromFile();
            compress();
        } // ***<<RadioBotton2>>***
        else if (jRadioButton2.isSelected()) {
            deCompress();
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(standardhuffman.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(standardhuffman.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(standardhuffman.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(standardhuffman.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new standardhuffman().setVisible(true);

            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JRadioButton jRadioButton1;
    private javax.swing.JRadioButton jRadioButton2;
    private java.awt.TextArea textArea1;
    // End of variables declaration//GEN-END:variables
}