/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author Abdallah Okasha
 */
import java.util.*;
import java.io.*;
public class LinearQuantization extends javax.swing.JFrame {
  
        ArrayList<Double> input = new ArrayList<Double>();
        ArrayList<Double> inputor = new ArrayList<Double>();
        ArrayList<String> binCode = new ArrayList<String>();
        ArrayList<Double> lw = new ArrayList<Double>();
        ArrayList<Double> up = new ArrayList<Double>(); 
        BufferedReader br = null;
        String ans="";
        String n="";
        int num=0;

    public LinearQuantization() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jRadioButton1 = new javax.swing.JRadioButton();
        jRadioButton2 = new javax.swing.JRadioButton();
        jButton1 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jRadioButton1.setText("Quantization");
        jRadioButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton1ActionPerformed(evt);
            }
        });

        jRadioButton2.setText("De_Quantization");
        jRadioButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton2ActionPerformed(evt);
            }
        });

        jButton1.setText("Ok");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel1.setText("Num of Bits");

        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });

        jLabel2.setText("LinearQuantization");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jRadioButton2)
                .addGap(90, 90, 90))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(62, 62, 62)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jRadioButton1)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(48, 48, 48)
                                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(152, 152, 152)
                        .addComponent(jButton1))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel2)))
                .addContainerGap(134, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 102, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addGap(72, 72, 72)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jRadioButton1)
                    .addComponent(jRadioButton2))
                .addGap(18, 18, 18)
                .addComponent(jButton1)
                .addGap(35, 35, 35))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jRadioButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton1ActionPerformed
        jRadioButton1.setSelected(true);
        jRadioButton2.setSelected(false);
    }//GEN-LAST:event_jRadioButton1ActionPerformed

    private void jRadioButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton2ActionPerformed
        jRadioButton2.setSelected(true);
        jRadioButton1.setSelected(false);
        
    }//GEN-LAST:event_jRadioButton2ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
       if(jRadioButton1.isSelected()){
       n=jTextField1.getText();
       num=Integer.parseInt(n);
       try {
            String sCurrentLine;
            br = new BufferedReader(new FileReader("D:\\Java\\Linear Quantization\\input.txt"));

            while ((sCurrentLine = br.readLine()) != null) {
                //System.out.print(sCurrentLine + " ");
                double value = Double.parseDouble(sCurrentLine);
                input.add(value);
            }

        } catch (IOException e) {
        } finally {
            try {
                if (br != null) {
                    br.close();
                }
            } catch (IOException ex) {
            }
        }
        //==
        for (int i=0;i<input.size();i++){
        inputor.add(input.get(i));}
        //****<< code >>****
        Collections.sort(input);
        //System.out.println("new arraylist");
                /*for (int i=0;i<input.size();i++){
         System.out.print(input.get(i)+ " ");    
         }*/
        double level = Math.pow(2.00, num);
        //System.out.println();
        //double tmp=((input.get(0)+input.get(input.size()-1))/level);
        int step = (int) ((input.get(input.size() - 1)-(input.get(0)) ) / (int) level);
        //if (step!=tmp)step++;
        //System.out.println(step);
        // Write on output.txt file 
        //int[][] arr = new int[100][5];
        //int x = 1;
        //System.out.println(Integer.toBinaryString(x));
        //Create binary code 
        for (int i = 0; i < level; i++) {
            String bin = Integer.toBinaryString(i);
            if (bin.length() != num) {
                for (int j = bin.length(); j < num; j++) {
                    bin = '0' + bin;
                }
            }
            //System.out.println(bin);
            binCode.add(bin);
        }
        double b = input.get(0), en = step;
        for (int i = 0; i < level; i++) {
            lw.add(b);
            up.add(en);
            en += (step + 1);
            b += (step + 1);
        }
        
        /*System.out.println("\n");
        for (int i = 0; i < inputor.size(); i++) {
            System.out.print(inputor.get(i)+ " ");}*/
        //System.out.println("\n");
        for (int i = 0; i < inputor.size(); i++) {
            for (int j = 0; j < lw.size(); j++) {
                if (inputor.get(i) >= lw.get(j) && inputor.get(i) <= up.get(j)) {
                    //System.out.println(binCode.get(j));
                    ans = ans + binCode.get(j);
                    break;
                }
            }
        }
        System.out.print("Compression : ");
        System.out.println(ans);
        /*for(int i=0;i<lw.size();i++){
         System.out.print(lw.get(i)+" ");
         }
         System.out.println();
         for(int i=0;i<up.size();i++){
         System.out.print(up.get(i)+" ");
         }*/
        //===
        for (int i=0;i<lw.size();i++)
        {
            System.out.println(lw.get(i)+ " " + up.get(i) + " " + binCode.get(i));
        }    
        }
       else if(jRadioButton2.isSelected()){
         
           n=jTextField1.getText();
         num=Integer.parseInt(n);
        System.out.print("Decompression : ");
        ArrayList<Double> dec = new ArrayList<Double>();
        String tmp="";
        for (int i=0;i<ans.length();i++){
          
            if (tmp.length()==num){
            for (int j=0;j<binCode.size();j++){
                if (tmp.equals(binCode.get(j))){
                dec.add((lw.get(j)+up.get(j))/2);
                break;
                }
            }
            tmp="";
            }
            tmp=tmp+ans.charAt(i);
            //System.out.print(tmp+" ");
        }
        if (tmp.length()!=0){
            for (int j=0;j<binCode.size();j++){
                if (tmp.equals(binCode.get(j))){
                dec.add((lw.get(j)+up.get(j))/2);
                break;
                }
            }
        }
        //===
        for (int i=0;i<dec.size();i++){
            System.out.print(dec.get(i)+" ");}
        //===
        System.out.println("");
        try {
            String content = ans;
            File file = new File("D:\\Java\\Linear Quantization\\output.txt");
            // if file doesnt exists, then create it
            if (!file.exists()) {
                file.createNewFile();
            }
            FileWriter fw = new FileWriter(file.getAbsoluteFile());

            try (BufferedWriter bw = new BufferedWriter(fw)) {
                bw.write(content);
            }
            System.out.println("Done");

        } catch (IOException e) {
        }

     

        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(LinearQuantization.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(LinearQuantization.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(LinearQuantization.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(LinearQuantization.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new LinearQuantization().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JRadioButton jRadioButton1;
    private javax.swing.JRadioButton jRadioButton2;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables
}
//Okasha