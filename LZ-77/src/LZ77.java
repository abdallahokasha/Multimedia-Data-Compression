
import java.io.File;
import java.io.FileNotFoundException;
import java.util.ArrayList;
import java.util.Scanner;
import java.util.Vector;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author Abdallah
 */
public class LZ77 extends javax.swing.JFrame {

    /**
     * Creates new form LZ77
     */
    String data = "";
    ArrayList<Tag> tags = new ArrayList<Tag>();
    ArrayList<Integer> pointers = new ArrayList<Integer>();
    ArrayList<Integer> lengths = new ArrayList<Integer>();
    ArrayList<Character> nextChars = new ArrayList<Character>();

    public LZ77() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jRadioButton1 = new javax.swing.JRadioButton();
        jRadioButton2 = new javax.swing.JRadioButton();
        jButton1 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jRadioButton1.setText("Compress");
        jRadioButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton1ActionPerformed(evt);
            }
        });

        jRadioButton2.setText("De-Compress");
        jRadioButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton2ActionPerformed(evt);
            }
        });

        jButton1.setText("Ok");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel1.setText("LZ-77");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(35, 35, 35)
                .addComponent(jRadioButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 68, Short.MAX_VALUE)
                .addComponent(jRadioButton2)
                .addGap(43, 43, 43))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(129, 129, 129)
                        .addComponent(jButton1))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel1)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel1)
                .addGap(43, 43, 43)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jRadioButton1)
                    .addComponent(jRadioButton2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 51, Short.MAX_VALUE)
                .addComponent(jButton1)
                .addGap(43, 43, 43))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jRadioButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton1ActionPerformed
        jRadioButton1.setSelected(true);
        jRadioButton2.setSelected(false);
    }//GEN-LAST:event_jRadioButton1ActionPerformed

    private void jRadioButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton2ActionPerformed
        jRadioButton2.setSelected(true);
        jRadioButton1.setSelected(false);
    }//GEN-LAST:event_jRadioButton2ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        if (jRadioButton1.isSelected()) {
            //read data from input file
            File file = new File("D:\\FCI\\3th-Level\\Java\\LZ-77\\input.txt");
            try {
                Scanner sc = new Scanner(file);
                while (sc.hasNextLine()) {
                    String line = sc.nextLine();
                    //System.out.println(line);
                    data += line;
                }
                sc.close();
            } catch (FileNotFoundException e) {
                e.printStackTrace();
            }
            System.out.println("input data: ");
            System.out.println(data);

            Tag t = new Tag();
            System.out.println("          <<Compression>>");

            String notFound = "";
            String currentData = "";
            for (int i = 0; i < data.length(); i++) {
                notFound += data.charAt(i);

                if (currentData.contains(notFound) == false) {
                    if (notFound.length() == 1) {
                        t.pointer = 0;
                        t.length = 0;
                        t.nextChar = notFound.charAt(0);
                        //tags.add(t);
                        pointers.add(0);
                        lengths.add(0);
                        nextChars.add(notFound.charAt(0));
                        System.out.println("currentData: " + currentData);
                        System.out.println("notFound: " + notFound);
                        System.out.println("<" + t.pointer + ", " + t.length + ", " + t.nextChar + ">");
                        currentData += notFound;
                        notFound = "";
                    } else {
                        //search for notFound String in CurrentData 
                        int index = currentData.lastIndexOf(notFound.subSequence(0, notFound.length() - 1) + "");
                        System.out.println("index: " + index);
                        System.out.println("currentData: " + currentData);
                        System.out.println("notFound: " + notFound);
                        t.pointer = i - index - (notFound.length() - 1);
                        t.length = notFound.length() - 1;
                        t.nextChar = notFound.charAt(notFound.length() - 1);
                        //tags.add(t);
                        pointers.add(i - index - (notFound.length() - 1));
                        lengths.add(notFound.length() - 1);
                        nextChars.add(notFound.charAt(notFound.length() - 1));
                        System.out.println("<" + t.pointer + ", " + t.length + ", " + t.nextChar + ">");
                        currentData += notFound;
                        notFound = "";
                    }
                }
            }
            //Handle rest of data
            if (currentData.contains(notFound) == false) {
                System.out.println("here");
                if (notFound.length() == 1) {
                    t.pointer = 0;
                    t.length = 0;
                    t.nextChar = notFound.charAt(0);
                    //tags.add(t);
                    pointers.add(0);
                    lengths.add(0);
                    nextChars.add(notFound.charAt(0));
                    System.out.println("currentData: " + currentData);
                    System.out.println("notFound: " + notFound);
                    System.out.println("<" + t.pointer + ", " + t.length + ", " + t.nextChar + ">");
                    currentData += notFound;
                    notFound = "";
                } else {
                    //search for notFound String in CurrentData 
                    int index = currentData.lastIndexOf(notFound.subSequence(0, notFound.length() - 1) + "");
                    System.out.println("index: " + index);
                    System.out.println("currentData: " + currentData);
                    System.out.println("notFound: " + notFound);
                    t.pointer = data.length() - 1 - index - (notFound.length() - 1);
                    t.length = notFound.length() - 1;
                    t.nextChar = notFound.charAt(notFound.length() - 1);
                    //tags.add(t);
                    pointers.add(data.length() - 1 - index - (notFound.length() - 1));
                    lengths.add(notFound.length() - 1);
                    nextChars.add(notFound.charAt(notFound.length() - 1));

                    System.out.println("<" + t.pointer + ", " + t.length + ", " + t.nextChar + ">");
                    currentData += notFound;
                    notFound = "";
                }
            } else if (currentData.contains(notFound) == true) {
                int index = currentData.lastIndexOf(notFound.subSequence(0, notFound.length()) + "");
                System.out.println("index: " + index);
                System.out.println("currentData: " + currentData);
                System.out.println("notFound: " + notFound);
                t.pointer = currentData.length() - index;
                t.length = notFound.length();
                t.nextChar = '#';
                //tags.add(t);
                pointers.add(currentData.length() - index);
                lengths.add(notFound.length());
                nextChars.add('#');

                System.out.println("<" + t.pointer + ", " + t.length + ", " + t.nextChar + ">");
                currentData += notFound;
                notFound = "";
            }
            //compute compression size
            int m1 = -1, m2 = -1;
            for (int i = 0; i < pointers.size(); i++) {
                if (pointers.get(i) > m1) {
                    m1 = pointers.get(i);
                }
                System.out.println("=>> " + pointers.get(i) + " " + lengths.get(i) + " " + nextChars.get(i));
                if (lengths.get(i) > m2) {
                    m2 = lengths.get(i);
                }
            }
            int c1 = 0, c2 = 0, x = 1;
            while (x < m1) {
                x *= 2;
                c1++;
            }
            x = 1;
            while (x < m2) {
                x *= 2;
                c2++;
            }
            System.out.println("Original size = "+ data.length()*7);
            int totalCompressionSize = pointers.size() * (c1 + c2 + 7);
            System.out.println("Compression size = " + totalCompressionSize);
        } else if (jRadioButton2.isSelected()) {
            System.out.println("        <<De-Compression>>");
            String decompress = "";
            for (int i=0;i<pointers.size();i++){
                if (pointers.get(i) == 0)decompress += nextChars.get(i);
                else {
                    System.out.println("->> " + decompress);
                    String tmp =""+ decompress.subSequence(decompress.length()-pointers.get(i), (decompress.length()-pointers.get(i))+lengths.get(i));
                    if (nextChars.get(i) != '#')tmp += nextChars.get(i);
                    System.out.println("))" + tmp);
                    decompress += tmp;
                }
            }
            System.out.println("Decompressed Data: " + decompress);
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(LZ77.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(LZ77.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(LZ77.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(LZ77.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new LZ77().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JRadioButton jRadioButton1;
    private javax.swing.JRadioButton jRadioButton2;
    // End of variables declaration//GEN-END:variables
}
//abaababaabbbb
//abaababaabbbbbbbbbbbba
